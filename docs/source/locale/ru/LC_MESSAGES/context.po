# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Yaroslav Nikitenko
# This file is distributed under the same license as the Lena package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Lena 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-03 16:54+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/context.rst:2
msgid "Context"
msgstr ""

#: ../../source/context.rst:3
msgid "**Elements:**"
msgstr ""

#: ../../source/context.rst:10:<autosummary>:1
msgid ":obj:`Context <lena.context.Context>`\\ \\(\\[d\\, formatter\\]\\)"
msgstr ""

#: ../../source/context.rst:10:<autosummary>:1 lena.context.Context:1 of
msgid "Dictionary with easy-to-read formatting."
msgstr ""

#: ../../source/context.rst:10:<autosummary>:1
msgid ""
":obj:`UpdateContext <lena.context.UpdateContext>`\\ \\(subcontext\\, "
"update\\[\\, value\\, ...\\]\\)"
msgstr ""

#: ../../source/context.rst:10:<autosummary>:1 lena.context.UpdateContext:1 of
msgid "Update context of passing values."
msgstr ""

#: ../../source/context.rst:11
msgid "**Functions:**"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ":obj:`contains <lena.context.functions.contains>`\\ \\(d\\, s\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.contains:1 of
msgid ""
"Check that a dictionary *d* contains a subdictionary defined by a string "
"*s*."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ":obj:`difference <lena.context.functions.difference>`\\ \\(d1\\, d2\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.difference:1 of
msgid "Return a dictionary with items from *d1* not contained in *d2*."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ""
":obj:`format_context <lena.context.functions.format_context>`\\ "
"\\(format\\_str\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.format_context:1 of
msgid "Create a function that formats a given string using a context."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ""
":obj:`get_recursively <lena.context.functions.get_recursively>`\\ \\(d\\,"
" keys\\[\\, default\\]\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.get_recursively:1 of
msgid "Get value from a dictionary *d* recursively."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ""
":obj:`intersection <lena.context.functions.intersection>`\\ "
"\\(\\*dicts\\, \\*\\*kwargs\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.intersection:1 of
msgid ""
"Return a dictionary, such that each of its items are contained in all "
"*dicts* (recursively)."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ":obj:`str_to_dict <lena.context.functions.str_to_dict>`\\ \\(s\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.str_to_dict:1 of
msgid "Create a dictionary from a dot-separated string *s*."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ":obj:`str_to_list <lena.context.functions.str_to_list>`\\ \\(s\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.str_to_list:1 of
msgid "Like :func:`str_to_dict`, but return a flat list."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ""
":obj:`update_nested <lena.context.functions.update_nested>`\\ \\(d\\, "
"other\\)"
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
#: lena.context.functions.update_nested:1
#: lena.context.functions.update_recursively:1 of
msgid "Update dictionary *d* with items from *other* dictionary."
msgstr ""

#: ../../source/context.rst:25:<autosummary>:1
msgid ""
":obj:`update_recursively <lena.context.functions.update_recursively>`\\ "
"\\(d\\, other\\)"
msgstr ""

#: ../../source/context.rst:38
msgid "Elements"
msgstr ""

#: lena.context.Context:1 of
msgid "Bases: :class:`dict`"
msgstr ""

#: lena.context.Context:3 of
msgid ":class:`Context` provides a better representation for context. Example:"
msgstr ""

#: lena.context.Context:15 of
msgid "Initialize from a dictionary *d* (empty by default)."
msgstr ""

#: lena.context.Context:17 of
msgid ""
"Representation is defined by the *formatter*. That must be a callable, "
"which should accept a dictionary and return a string. The default is "
"``json.dumps``."
msgstr ""

#: lena.context.Context:24 of
msgid ""
"JSON and Python representations are different. In particular, JSON *True*"
" is written as lowercase *true*. To convert JSON back to Python, use "
"``json.loads(string)``."
msgstr ""

#: lena.context.Context:28 of
msgid ""
"If *formatter* is given but is not callable, :exc:`.LenaTypeError` is "
"raised."
msgstr ""

#: lena.context.Context.__call__:1 of
msgid "Convert *value*'s context to :class:`Context` on the fly."
msgstr ""

#: lena.context.Context.__call__:3 of
msgid ""
"If the *value* is a *(data, context)* pair, convert its context part to "
":class:`Context`. If the *value* doesn't contain a context, it is created"
" as an empty :class:`Context`."
msgstr ""

#: lena.context.Context.__call__:8 of
msgid ""
"When a :class:`Context` is used as a sequence element, its initialization"
" argument *d* has no effect on the produced values."
msgstr ""

#: lena.context.UpdateContext:3 of
msgid ""
"*subcontext* is a string representing the part of context to be updated "
"(for example, *\"output.plot\"*). *subcontext* must be non-empty."
msgstr ""

#: lena.context.UpdateContext:7 of
msgid ""
"*update* will become the value of *subcontext* during :meth:`__call__`. "
"It can be one of three different types:"
msgstr ""

#: lena.context.UpdateContext:11 of
msgid "a simple value (not a string),"
msgstr ""

#: lena.context.UpdateContext:12 of
msgid "a context formatting string,"
msgstr ""

#: lena.context.UpdateContext:13 of
msgid "a context value (a string in curly braces)."
msgstr ""

#: lena.context.UpdateContext:15 of
msgid ""
"A context formatting string is any string with arguments enclosed in "
"double braces (for example, *\"{{variable.type}}_{{variable.name}}\"*). "
"Its argument values will be filled from context during :meth:`__call__`. "
"If a formatting argument is missing in context, it will be substituted "
"with an empty string."
msgstr ""

#: lena.context.UpdateContext:23 of
msgid ""
"To set *update* to a value from context (not a string), the keyword "
"argument *value* must be set to ``True`` and the *update* format string "
"must be a non-empty single expression in double braces "
"(*\"{{variable.compose}}\"*)."
msgstr ""

#: lena.context.UpdateContext:29 of
msgid ""
"If *update* corresponds to a context value and a formatting argument is "
"missing in the context, :exc:`.LenaKeyError` will be raised unless a "
"*default* is set. In this case *default* will be used for the update "
"value."
msgstr ""

#: lena.context.UpdateContext:34 of
msgid ""
"If *update* is a context formatting string, *default* keyword argument "
"can't be used. To set a default value other than an empty string, use a "
"jinja2 filter. For example, if *update* is "
"*\"{{variable.name|default('x')}}\"*, then *update* will be set to \"x\" "
"both if *context.variable.name* is missing and if *context.variable* is "
"missing itself."
msgstr ""

#: lena.context.UpdateContext:42 of
msgid "Other variants to deal with missing context values are:"
msgstr ""

#: lena.context.UpdateContext:44 of
msgid "to skip update (don't change the context), set by *skip_on_missing*, or"
msgstr ""

#: lena.context.UpdateContext:46 of
msgid "to raise :exc:`.LenaKeyError` (set by *raise_on_missing*)."
msgstr ""

#: lena.context.UpdateContext:48 of
msgid ""
"Only one of *default*, *skip_on_missing* or *raise_on_missing* can be "
"set, otherwise :exc:`.LenaValueError` is raised. None of these options "
"can be used if *update* is a simple value."
msgstr ""

#: lena.context.UpdateContext:52 of
msgid ""
"If *recursively* is ``True`` (default), not overwritten existing values "
"of *subcontext* are preserved. Otherwise, all existing values of "
"*subcontext* (at its lowest level) are removed. See also "
":func:`.update_recursively`."
msgstr ""

#: lena.context.UpdateContext:58 lena.context.functions.contains:8
#: lena.context.functions.intersection:14 lena.context.functions.str_to_dict:10
#: of
msgid "Example:"
msgstr ""

#: lena.context.UpdateContext:67 of
msgid ""
"If *subcontext* is not a string, :exc:`.LenaTypeError` is raised. If it "
"is empty, :exc:`.LenaValueError` is raised. If *value* is ``True``, "
"braces can be only the first two and the last two symbols of *update*, "
"otherwise :exc:`.LenaValueError` is raised."
msgstr ""

#: lena.context.UpdateContext.__call__:1 of
msgid "Update *value*'s context."
msgstr ""

#: lena.context.UpdateContext.__call__:3 of
msgid ""
"If the *value* is updated, *subcontext* is always created (also if the "
"*value* contains no context)."
msgstr ""

#: lena.context.UpdateContext.__call__:7 of
msgid ""
":exc:`.LenaKeyError` is raised if *raise_on_missing* is ``True`` and the "
"update argument is missing in *value*'s context."
msgstr ""

#: ../../source/context.rst:51
msgid "Functions"
msgstr ""

#: lena.context.functions.contains:4 of
msgid ""
"True if *d* contains a subdictionary that is represented by *s*. Dots in "
"*s* mean nested subdictionaries. A string without dots means a key in "
"*d*."
msgstr ""

#: lena.context.functions.contains:18 of
msgid ""
"If the most nested element of *d* to be compared with *s* is not a "
"string, its string representation is used for comparison. See also "
":func:`str_to_dict`."
msgstr ""

#: lena.context.functions.difference:3 of
msgid ""
"If a key is present both in *d1* and *d2* but has different values, it is"
" included into the difference."
msgstr ""

#: lena.context.functions.format_context:3 of
msgid ""
"It is recommended to use jinja2.Template. Use this function only if you "
"don't have jinja2."
msgstr ""

#: lena.context.functions.format_context:6 of
msgid ""
"*format_str* is a Python format string with double braces instead of "
"single ones. It must contain all non-empty replacement fields, and only "
"simplest formatting without attribute lookup. Example:"
msgstr ""

#: lena.context.functions.format_context:16 of
msgid ""
"When calling *format_context*, arguments are bound and a new function is "
"returned. When called with a context, its keys are extracted and "
"formatted in *format_str*."
msgstr ""

#: lena.context.functions.format_context:20 of
msgid "Keys can be nested using a dot, for example:"
msgstr ""

#: lena.context.functions.format_context:26 of
msgid ""
"This function does not work with unbalanced braces. If a simple check "
"fails, :exc:`.LenaValueError` is raised. If *format_str* is not a string,"
" :exc:`.LenaTypeError` is raised. All other errors are raised only during"
" formatting. If context doesn't contain the needed key, "
":exc:`.LenaKeyError` is raised. Note that string formatting can also "
"raise a :exc:`ValueError`, so it is recommended to test your formatters "
"before using them."
msgstr ""

#: lena.context.functions.get_recursively:3 of
msgid ""
"*keys* can be a list of simple keys (strings), a dot-separated string or "
"a dictionary with at most one key at each level. A string is split by "
"dots and used as a list. A list of keys is searched in the dictionary "
"recursively (it represents nested dictionaries). If any of them is not "
"found, *default* is returned if \"default\" is given, otherwise "
":exc:`.LenaKeyError` is raised."
msgstr ""

#: lena.context.functions.get_recursively:13 of
msgid "If *keys* is empty, *d* is returned."
msgstr ""

#: lena.context.functions.get_recursively:15 of
msgid "Examples:"
msgstr ""

#: lena.context.functions.get_recursively:24 of
msgid ""
"Python's dict.get in case of a missing value returns ``None`` and never "
"raises an error. We implement it differently, because it allows more "
"flexibility."
msgstr ""

#: lena.context.functions.get_recursively:29 of
msgid ""
"If *d* is not a dictionary or if *keys* is not a string, a dict or a "
"list, :exc:`.LenaTypeError` is raised. If *keys* is a dictionary with "
"more than one key at some level, :exc:`.LenaValueError` is raised."
msgstr ""

#: lena.context.functions.intersection:4 of
msgid ""
"*dicts* are several dictionaries. If *dicts* is empty, an empty "
"dictionary is returned."
msgstr ""

#: lena.context.functions.intersection:7 of
msgid ""
"A keyword argument *level* sets maximum number of recursions. For "
"example, if *level* is 0, all *dicts* must be equal (otherwise an empty "
"dict is returned). If *level* is 1, the result contains those "
"subdictionaries which are equal. For arbitrarily nested subdictionaries "
"set *level* to -1 (default)."
msgstr ""

#: lena.context.functions.intersection:29 of
msgid ""
"This function always returns a dictionary or its subtype (copied from "
"dicts[0]). All values are deeply copied. No dictionary or subdictionary "
"is changed."
msgstr ""

#: lena.context.functions.intersection:34 of
msgid ""
"If any of *dicts* is not a dictionary or if some *kwargs* are unknown, "
":exc:`.LenaTypeError` is raised."
msgstr ""

#: lena.context.functions.str_to_dict:3 of
msgid ""
"Dots represent nested dictionaries. *s*, if not empty, must have at least"
" two dot-separated parts (*a.b*), otherwise :exc:`.LenaValueError` is "
"raised."
msgstr ""

#: lena.context.functions.str_to_dict:7 of
msgid ""
"If *s* is empty, an empty dictionary is returned. *s* can be a "
"dictionary. In this case it is returned as it is."
msgstr ""

#: lena.context.functions.str_to_list:3 of
msgid ""
"If the string *s* is empty, an empty list is returned. This is different "
"from *str.split*: the latter would return a list with one empty string. "
"Contrarily to :func:`str_to_dict`, this function allows arbitrary number "
"of dots in *s* (or none)."
msgstr ""

#: lena.context.functions.update_nested:3 of
msgid ""
"*other* must be a dictionary of one element, which is used as a key. If "
"*d* doesn't contain the key, *d* is updated with *other*. If *d* contains"
" the key, the value with that key is nested inside the copy of *other* at"
" the level which doesn't contain the key. *d* is updated."
msgstr ""

#: lena.context.functions.update_nested:10 of
msgid ""
"If *d[key]* is not a dictionary or if there is not one key in *other*, "
":exc:`.LenaValueError` is raised."
msgstr ""

#: lena.context.functions.update_recursively:3 of
msgid ""
"*other* can be a dot-separated string. In this case :func:`str_to_dict` "
"is used to convert it to a dictionary."
msgstr ""

#: lena.context.functions.update_recursively:6 of
msgid ""
"Existing values are updated recursively, that is including nested "
"subdictionaries. For example:"
msgstr ""

#: lena.context.functions.update_recursively:17 of
msgid "Non-dictionary items from *other* overwrite those in *d*:"
msgstr ""

#: lena.context.functions.update_recursively:23 of
msgid ""
"Both *d* and *other* must be dictionaries, otherwise "
":exc:`.LenaTypeError` is raised."
msgstr ""

#~ msgid "**Context:**"
#~ msgstr ""

#~ msgid ""
#~ ":obj:`Context <lena.context.context.Context>`\\ \\(\\[d\\,"
#~ " formatter\\]\\)"
#~ msgstr ""

#~ msgid "Make better output for context. Example:"
#~ msgstr ""

#~ msgid "Initialize from a dictionary *d*."
#~ msgstr ""

#~ msgid ""
#~ "JSON and Python representations are "
#~ "different. In particular, JSON *True* is"
#~ " written lowercase *true*. To convert "
#~ "JSON back to Python, use "
#~ "``json.loads(string)``."
#~ msgstr ""

#~ msgid ""
#~ "If *formatter* is given but is not"
#~ " callable, :exc:`~lena.core.LenaTypeError` is "
#~ "raised."
#~ msgstr ""

#~ msgid ""
#~ "Dots represent nested dictionaries. *s* "
#~ "must have at least two dot-"
#~ "separated parts (*a.b*), otherwise "
#~ ":exc:`~lena.core.LenaValueError` is raised."
#~ msgstr ""

#~ msgid ""
#~ ":obj:`UpdateContext <lena.context.UpdateContext>`\\ "
#~ "\\(subcontext\\, update\\[\\, recursively\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "*subcontext* is a string representing "
#~ "the part of context to be updated"
#~ " (for example, *output.plot*). If "
#~ "*subcontext* is an empty string, all "
#~ "context will be overwritten."
#~ msgstr ""

#~ msgid "*update* is a dictionary that will become the value of *subcontext*."
#~ msgstr ""

#~ msgid ""
#~ "The context in the class name "
#~ "means any general context (not only "
#~ ":class:`.Context`)."
#~ msgstr ""

#~ msgid ""
#~ "In case of wrong types of "
#~ "*subcontext* or *update* :exc:`.LenaTypeError` "
#~ "is raised."
#~ msgstr ""

#~ msgid "Update context of the *value*."
#~ msgstr ""

#~ msgid ""
#~ "If *value*'s context doesn't contain "
#~ "*subcontext*, it is created. If the "
#~ "*value* contains no context, it is "
#~ "also created."
#~ msgstr ""

#~ msgid ""
#~ "*keys* can be a list of simple "
#~ "keys (strings), a dot-separated string"
#~ " or a dictionary with at most "
#~ "one key at each level. A string"
#~ " is split by dots and used as"
#~ " a list. A list of keys is "
#~ "searched in the dictionary recursively "
#~ "(it represents nested dictionaries). If "
#~ "any of them is not found, "
#~ "*default* is returned if \"default\" is"
#~ " given, otherwise :exc:`~lena.core.LenaKeyError` "
#~ "is raised."
#~ msgstr ""

#~ msgid ""
#~ "If *d* is not a dictionary or "
#~ "if *keys* have unknown types, "
#~ ":exc:`~lena.core.LenaTypeError` is raised. If "
#~ "*keys* is a dictionary with more "
#~ "than one key at some level, "
#~ ":exc:`~lena.core.LenaValueError` is raised."
#~ msgstr ""

#~ msgid ""
#~ "If any of *dicts* is not a "
#~ "dictionary or if some *kwargs* are "
#~ "unknown, :exc:`~lena.core.LenaTypeError` is raised."
#~ msgstr ""

#~ msgid ""
#~ "Dots represent nested dictionaries. *s*, "
#~ "if not empty, must have at least"
#~ " two dot-separated parts (*a.b*), "
#~ "otherwise :exc:`~lena.core.LenaValueError` is "
#~ "raised."
#~ msgstr ""

#~ msgid ""
#~ "If *d[key]* is not a dictionary or"
#~ " if there is not one key in "
#~ "*other*, :exc:`~lena.core.LenaValueError` is raised."
#~ msgstr ""

#~ msgid ""
#~ "Both *d* and *other* must be "
#~ "dictionaries, otherwise :exc:`~lena.core.LenaTypeError`"
#~ " is raised."
#~ msgstr ""

